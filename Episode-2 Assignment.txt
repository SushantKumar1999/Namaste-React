1. What is NPM?
NPM (Node Package Manager) is the default package manager for Node.js. It is used to install, manage, and update JavaScript libraries and dependencies. NPM allows developers to share reusable code through its vast registry of open-source packages. It also provides tools for managing project dependencies through package.json.

2. What is Parcel/Webpack? Why do we need it?
Parcel and Webpack are JavaScript bundlers that optimize and bundle files like JavaScript, CSS, and images into a single, efficient package for production.

Parcel is a zero-config, fast bundler with features like hot module replacement (HMR) and automatic dependency management.
Webpack is a more configurable, powerful bundler with plugins and loaders for handling complex workflows.
We need bundlers because they improve performance, enable modern JavaScript features (via transpiling), and optimize assets for production.


3. What is .parcel-cache?
The .parcel-cache folder is created by Parcel to store intermediate build results and speed up subsequent builds. Instead of reprocessing unchanged files, Parcel retrieves them from the cache, making builds significantly faster. Deleting this folder will force Parcel to rebuild everything from scratch.


4. What is npx?
npx (Node Package eXecute) is a tool that runs NPM packages without globally installing them. It is useful for running CLI tools like create-react-app without cluttering your global environment.
Example:
npx create-react-app my-app



5. Difference between dependencies vs devDependencies
dependencies are essential for running the application in production (e.g., React, Express).
devDependencies are needed only for development (e.g., Babel, ESLint, Jest).
These are defined in package.json:
"dependencies": {
  "react": "^18.0.0"
},
"devDependencies": {
  "eslint": "^8.0.0"
}


6. What is Tree Shaking?
Tree shaking is a technique used by bundlers like Webpack and Parcel to remove unused (dead) code from the final bundle, reducing file size. It works by analyzing ES6 module imports and removing unused exports.

Example:
// utils.js
export function usedFunction() { console.log("Used"); }
export function unusedFunction() { console.log("Unused"); }

// main.js
import { usedFunction } from "./utils";
usedFunction();
If unusedFunction() is never used, Tree Shaking removes it from the final bundle.


7. What is Hot Module Replacement?
Hot Module Replacement (HMR) is a feature in bundlers like Webpack and Parcel that updates only modified modules without reloading the entire page. This improves development speed by keeping the application state intact while making real-time updates to the code.


8. Five Superpowers of Parcel
Zero Configuration – No need for complex setup; Parcel works out of the box.
Faster Builds with Caching – Uses .parcel-cache to speed up builds.
Hot Module Replacement (HMR) – Updates code live without reloading.
Tree Shaking – Removes unused code automatically.
Multi-Target Builds – Supports different output formats for browsers, Node.js, etc.


Explaining Three:

Zero Configuration: Unlike Webpack, Parcel does not require a config file. It automatically detects file dependencies and compiles them.
Hot Module Replacement: It allows changes to be reflected immediately in the browser without losing state, making debugging easier.
Tree Shaking: Parcel removes unused imports from the final bundle, making it smaller and improving performance.



9. What is .gitignore? What should we add and not add into it?
.gitignore is a file that tells Git which files or folders to ignore in version control. It prevents unwanted files from being pushed to a repository.

✅ Add to .gitignore:

node_modules/ (large dependencies)
.env (API keys, credentials)
dist/ (build output)
*.log (log files)
❌ Do not add important files like package.json, .gitignore itself, or README.md.



10. Difference between package.json and package-lock.json
package.json defines project metadata, dependencies, scripts, and configuration. It provides flexibility by allowing version ranges (e.g., "react": "^18.0.0").

package-lock.json ensures exact dependency versions, preventing unexpected changes across different environments. It locks the dependency tree, ensuring that every developer gets the same versions.



11. Why should I not modify package-lock.json?
Manually modifying package-lock.json can lead to inconsistencies and potential breakages in dependency resolution. It is automatically generated by NPM to maintain version integrity, and any manual changes can cause compatibility issues across environments. Instead of editing it, update dependencies using npm install or npm update.



12. What is node_modules? Is it a good idea to push that to Git?
node_modules is the folder where NPM stores all installed dependencies. It contains third-party libraries required by the project.

No, it is not a good idea to push node_modules to Git, because:

It is huge (can be hundreds of MBs).
Dependencies can be installed using package.json with npm install.
It can cause unnecessary merge conflicts.
Instead, add node_modules to .gitignore and use npm install when setting up the project.



13. What is the dist folder?
The dist (distribution) folder contains the final, optimized, production-ready build of the project. It includes bundled, minified JavaScript, CSS, and other assets, generated by bundlers like Webpack and Parcel. This folder is deployed to the server but should not be committed to Git.


14. What is browserslist?
Browserslist is a configuration that defines which browsers a project should support. It is used by tools like Babel and Autoprefixer to ensure compatibility with target browsers.

Example configuration in package.json:
"browserslist": [
  ">0.2%",
  "not dead",
  "not op_mini all"
]
This ensures support for browsers with more than 0.2% market share while excluding outdated versions.


15. Read about different bundlers: Vite, Webpack, Parcel
Vite – A fast, modern bundler that uses ES Modules and native browser support for super-fast builds.
Webpack – A highly customizable and widely used bundler with support for loaders and plugins.
Parcel – A zero-config, fast bundler that optimizes builds automatically.


16. Read about ^ (caret) and ~ (tilde) in package.json
Caret (^) – Updates minor and patch versions (e.g., "^1.2.3" allows 1.3.0 but not 2.0.0).
Tilde (~) – Updates only patch versions (e.g., "~1.2.3" allows 1.2.4 but not 1.3.0).


17. Read about Script types in HTML (MDN Docs)
HTML <script> tags support different types, including:

type="module" – Loads JavaScript as an ES module, supporting import/export.
type="text/javascript" (default) – Loads as a regular JavaScript script.
type="application/json" – Used to embed JSON data within HTML.

